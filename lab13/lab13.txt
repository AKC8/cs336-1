Exercise 13.1
a. What benefit did using the React Router bring to the application?

React Router allows our application to simulate having different webpages accessible by URLs.

b. Which is better, hash history or browser history?

Hash history is an older work-around for legacy browsers that didn't support the HTML5 history API; it uses hashes in the URL to properly track history.
Browser history is the standard implementation of history that accesses the browsers history through an API, allowing for cleaner URLs.

c. Why does the server (either Webpack Dev Server or the Express server) have to be modified to support the browser history? Compare this with the hash-based server demonstrated in class, which didn't require such modifications.

The server is configured to only serve the package on the root URL: '/'. However, if a user try to refresh the page when any route, the GET request to the server will not be resolved.
To fix this issue, a wildcard is used to catch another other GET requests and simply serves up the static files again.


Exercise 13.2
a. What state does the new CommentEdit component maintain and how does that compare with the state maintained by the CommentBox component?

CommentEdit maintains the state of a single comment rather than the list of comments maintained by the CommentBox

b. What does the CommentEdit component do when the AJAX PUT or DELETE methods return successfully? How does this compare with what the “Cancel” button provided by the CommentEdit component does?

The when PUT and DELETE are success, the CommentEdit component navigates back to the home URL with the comment list. The Cancel button and the route push behave pretty similarly
by pushing the route onto the stack, the only difference I could think of is that the Cancel button is an actual link, while the route push is a programmatic route change.

c. How is the Link added in the last step different from a simple HTML hyperlink?

The Link is a HTML hyperlink. When inspecting the DOM, the Link resolves to a <a> tag. However, the internals of the Link are handled by react router rather than the browser.
By capturing the click event, react router can delegate what happens, while a regular HTML hyperlink will issue a GET request to the specified URL. 
